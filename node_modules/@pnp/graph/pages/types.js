import { __decorate } from "tslib";
import { combine } from "@pnp/core";
import { body } from "@pnp/queryable";
import { defaultPath, deleteable, getById, updateable } from "../decorators.js";
import { graphInvokableFactory, _GraphCollection, _GraphInstance, graphPost } from "../graphqueryable.js";
/**
 * Page
 */
let _Page = class _Page extends _GraphInstance {
};
_Page = __decorate([
    deleteable(),
    updateable()
], _Page);
export { _Page };
export const Page = graphInvokableFactory(_Page);
/**
 * Pages
 */
let _Pages = class _Pages extends _GraphCollection {
    get sitePages() {
        return SitePages(this);
    }
};
_Pages = __decorate([
    defaultPath("pages"),
    getById(Page)
], _Pages);
export { _Pages };
export const Pages = graphInvokableFactory(_Pages);
/**
 * Site Page
 */
let _SitePage = class _SitePage extends _GraphInstance {
    /**
     * Publishes the page
     * @returns void
     */
    async publish() {
        return graphPost(SitePage(this, "publish"));
    }
    /**
     * Gets the webparts in the page
     *
     * @returns array fo webpart information
     */
    async getWebPartsByPosition() {
        return SitePage(this, "getWebPartsByPosition")();
    }
    /**
     * Get a listing of all the webparts in this page
     */
    get webparts() {
        return Webparts(this);
    }
    /**
     * Gets the set of horizontal sections
     */
    get horizontalSections() {
        return HorizontalSections(this);
    }
    /**
     * Gets the set of vertical section
     */
    get verticalSection() {
        return VerticalSection(this);
    }
    /**
     * Creates a vertical section if none exists, returns the vertical section
     */
    ensureVerticalSection() {
        const y = this.select("verticalSection")();
        console.log(y);
        return null;
    }
};
_SitePage = __decorate([
    deleteable(),
    updateable()
], _SitePage);
export { _SitePage };
export const SitePage = graphInvokableFactory(_SitePage);
const SitePageTypeString = "microsoft.graph.sitePage";
/**
 * Site Pages
 */
let _SitePages = class _SitePages extends _GraphCollection {
    constructor(base, path) {
        super(base, path);
        this._pages = this.getParent(Pages, "");
    }
    getById(id) {
        return SitePage(this._pages, combine(id, SitePageTypeString));
    }
    async add(pageInfo) {
        return graphPost(this._pages, body({ "@odata.type": SitePageTypeString, ...pageInfo }));
    }
};
_SitePages = __decorate([
    defaultPath(SitePageTypeString)
], _SitePages);
export { _SitePages };
export const SitePages = graphInvokableFactory(_SitePages);
let _HorizontalSection = class _HorizontalSection extends _GraphInstance {
    get columns() {
        return HorizontalSectionColumns(this);
    }
};
_HorizontalSection = __decorate([
    updateable(),
    deleteable()
], _HorizontalSection);
export { _HorizontalSection };
export const HorizontalSection = graphInvokableFactory(_HorizontalSection);
let _HorizontalSections = class _HorizontalSections extends _GraphCollection {
    async add(props) {
        return graphPost(this, body(props));
    }
    getById(id) {
        const section = HorizontalSection(this);
        return section.concat(`('${id}')`);
    }
};
_HorizontalSections = __decorate([
    defaultPath("canvasLayout/horizontalSections")
], _HorizontalSections);
export { _HorizontalSections };
export const HorizontalSections = graphInvokableFactory(_HorizontalSections);
export class _HorizontalSectionColumn extends _GraphInstance {
    get webparts() {
        return Webparts(this);
    }
}
export const HorizontalSectionColumn = graphInvokableFactory(_HorizontalSectionColumn);
let _HorizontalSectionColumns = class _HorizontalSectionColumns extends _GraphCollection {
    getById(id) {
        const column = HorizontalSectionColumn(this);
        return column.concat(`('${id}')`);
    }
};
_HorizontalSectionColumns = __decorate([
    defaultPath("columns")
], _HorizontalSectionColumns);
export { _HorizontalSectionColumns };
export const HorizontalSectionColumns = graphInvokableFactory(_HorizontalSectionColumns);
let _VerticalSection = class _VerticalSection extends _GraphInstance {
    /**
     * Get a listing of all the webparts in this vertical section
     */
    get webparts() {
        return Webparts(this);
    }
};
_VerticalSection = __decorate([
    updateable(),
    deleteable(),
    defaultPath("canvasLayout/verticalSection")
], _VerticalSection);
export { _VerticalSection };
export const VerticalSection = graphInvokableFactory(_VerticalSection);
export class _Webpart extends _GraphInstance {
}
export const Webpart = graphInvokableFactory(_Webpart);
let _Webparts = class _Webparts extends _GraphCollection {
    /**
     * Gets the webpart information by id from the page's collection
     * @param id string id of the webpart
     * @returns The IWebpart instance
     */
    getById(id) {
        const url = this.toUrl();
        const base = url.slice(0, url.indexOf(SitePageTypeString) + SitePageTypeString.length);
        return Webpart([this, base], `webparts/${id}`);
    }
};
_Webparts = __decorate([
    defaultPath("webparts")
], _Webparts);
export { _Webparts };
export const Webparts = graphInvokableFactory(_Webparts);
//# sourceMappingURL=types.js.map