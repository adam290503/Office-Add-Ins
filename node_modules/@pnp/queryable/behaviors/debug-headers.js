/**
 *
 * @param otherHeaders Optional list of additional headers to log from the response
 * @returns A timeline pipe
 */
export function DebugHeaders(otherHeaders = []) {
    return (instance) => {
        instance.on.parse.prepend(async function (url, response, result) {
            var _a;
            // here we add logging for the request id and timestamp to assist in reporting issues to Microsoft
            const searchHeaders = ["request-id", "sprequestguid", "date", ...otherHeaders];
            for (let i = 0; i < searchHeaders.length; i++) {
                this.log(`${searchHeaders[i]}: ${(_a = response.headers.get(searchHeaders[i])) !== null && _a !== void 0 ? _a : ""}`);
            }
            return [url, response, result];
        });
        return instance;
    };
}
//# sourceMappingURL=debug-headers.js.map